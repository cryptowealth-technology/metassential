{"version":3,"file":"metassential.js","sources":["../src/signer.ts","../src/metaTx.ts"],"sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { JsonRpcProvider, Web3Provider } from '@ethersproject/providers';\nimport ethSigUtil, { TypedMessage } from '@metamask/eth-sig-util';\nimport { BigNumber } from 'ethers';\n\n/**\n * Field in a User Defined Types\n */\nexport interface EIP712StructField {\n  name: string;\n  type: string;\n}\n\n/**\n * User Defined Types are just an array of the fields they contain\n */\nexport type EIP712Struct = EIP712StructField[];\n/**\n * Interface of the EIP712Domain structure\n */\nexport interface EIP712Domain {\n  name: string;\n  version: string;\n  chainId?: number;\n  verifyingContract: string;\n}\n\n/**\n * Interface of the complete payload required for signing\n */\nexport interface EIP712Payload {\n  types: PayloadTypes;\n  primaryType: string;\n  message: Record<string, string | number>;\n  domain: EIP712Domain;\n}\n\nexport interface EIP712Signature {\n  hex: string;\n  v: number;\n  s: string;\n  r: string;\n}\n\nconst EIP712Domain = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n];\n\nconst ForwardRequest = [\n  { name: 'from', type: 'address' },\n  { name: 'to', type: 'address' },\n  { name: 'value', type: 'uint256' },\n  { name: 'gas', type: 'uint256' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'data', type: 'bytes' },\n];\n\ninterface PayloadTypes {\n  EIP712Domain: EIP712Struct,\n  ForwardRequest: EIP712Struct,\n}\n\nfunction getMetaTxTypeData(\n  verifyingContract: string,\n  message: Record<string, string | number>,\n  chainId: number,\n  name: string,\n): EIP712Payload {\n  return {\n    types: {\n      EIP712Domain,\n      ForwardRequest,\n    },\n    domain: {\n      name,\n      version: '0.0.1',\n      verifyingContract,\n      chainId,\n    },\n    primaryType: 'ForwardRequest',\n    message,\n  };\n}\n\nasync function signTypedData(\n  signer: Web3Provider | string,\n  from: string,\n  data: EIP712Payload,\n) {\n  // If signer is a private key, use it to sign\n  if (typeof signer === 'string') {\n    const privateKey = Buffer.from(signer.replace(/^0x/, ''), 'hex');\n    return ethSigUtil.signTypedData({\n      privateKey,\n      data: data as TypedMessage<any>,\n      version: ethSigUtil.SignTypedDataVersion.V4\n    });\n  }\n\n  // Otherwise, send the signTypedData RPC call\n  // Note that hardhatvm and metamask require different EIP712 input\n  const isHardhat = data.domain.chainId == 31337;\n  const [method, argData] = isHardhat\n    ? ['eth_signTypedData', data]\n    : ['eth_signTypedData_v4', JSON.stringify(data)];\n  return await signer.send(method, [from, argData]);\n}\n\nasync function attachNonce(\n  forwarder: Contract,\n  input: Record<string, any>,\n): Promise<Record<string, any>> {\n  const nonce = await forwarder\n    .getNonce(input.from)\n    .then((nonce: BigNumber) => nonce.toString());\n  return { value: 0, gas: 1e6, nonce, ...input };\n}\n\nasync function signMetaTxRequest(\n  signer: Web3Provider,\n  chainId: number,\n  readProvider: JsonRpcProvider,\n  input: Record<string, any>,\n  { abi, address, name }: Record<string, any>, // fwding ABI\n): Promise<{\n  signature: string;\n  request: Record<string, any>;\n}> {\n  const forwarder = new Contract(address, abi, readProvider);\n  const request = await attachNonce(forwarder, input);\n  const toSign = getMetaTxTypeData(forwarder.address, request, chainId, name);\n  const signature = await signTypedData(signer, input.from, toSign);\n\n  return { signature, request };\n}\n\nexport { signMetaTxRequest };\n","import { JsonRpcProvider, Web3Provider } from '@ethersproject/providers';\nimport { BigNumber } from 'ethers';\nimport { signMetaTxRequest } from './signer';\n\ntype OwnershipCreds = {\n  contractAddress: string;\n  tokenId: BigNumber;\n};\n\nexport async function sendMetaTx(\n  data: string,\n  to: string,\n  walletProvider: Web3Provider,\n  network: number,\n  readProvider: JsonRpcProvider,\n  from: string,\n  forwardingContract: { address: string; abi: any },\n  creds?: OwnershipCreds,\n  onSigned?: () => void,\n): Promise<any> {\n  const url = process.env.AUTOTASK_URL;\n\n  const request = await signMetaTxRequest(\n    walletProvider,\n    network,\n    readProvider,\n    {\n      to,\n      from,\n      data,\n      creds,\n    },\n    { ...forwardingContract },\n  );\n\n  if (!url) throw new Error(`Missing relayer url ${JSON.stringify(request)}`);\n\n  onSigned && onSigned();\n\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(request),\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n"],"names":["ethSigUtil","Contract"],"mappings":"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"}