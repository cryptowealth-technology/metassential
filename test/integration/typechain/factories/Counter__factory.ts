/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "incrementFromForwarderOnly",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105be3803806105be8339818101604052810190610032919061008f565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610101565b600081519050610089816100ea565b92915050565b6000602082840312156100a157600080fd5b60006100af8482850161007a565b91505092915050565b60006100c3826100ca565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f3816100b8565b81146100fe57600080fd5b50565b6104ae806101106000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806305d85eda14610051578063572b6c051461008157806370699884146100b1578063d09de08a146100bb575b600080fd5b61006b6004803603810190610066919061029a565b6100c5565b604051610078919061033f565b60405180910390f35b61009b6004803603810190610096919061029a565b6100dd565b6040516100a89190610304565b60405180910390f35b6100b9610136565b005b6100c36101dd565b005b60016020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61013f336100dd565b61017e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101759061031f565b60405180910390fd5b600180600061018b61023c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101d4919061036b565b92505081905550565b60018060006101ea61023c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610233919061036b565b92505081905550565b600061024661024b565b905090565b6000610256336100dd565b1561026a57601436033560601c9050610279565b61027261027d565b905061027a565b5b90565b600033905090565b60008135905061029481610461565b92915050565b6000602082840312156102ac57600080fd5b60006102ba84828501610285565b91505092915050565b6102cc816103d3565b82525050565b60006102df600d8361035a565b91506102ea82610438565b602082019050919050565b6102fe816103ff565b82525050565b600060208201905061031960008301846102c3565b92915050565b60006020820190508181036000830152610338816102d2565b9050919050565b600060208201905061035460008301846102f5565b92915050565b600082825260208201905092915050565b6000610376826103ff565b9150610381836103ff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156103b6576103b5610409565b5b828201905092915050565b60006103cc826103df565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f415353504c617965723a34323900000000000000000000000000000000000000600082015250565b61046a816103c1565b811461047557600080fd5b5056fea264697066735822122024ef4a11d2280e9be5b5ba119491969f43dadd385e3440906706ddc987dcc2a264736f6c63430008040033";

export class Counter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(trustedForwarder, overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(trustedForwarder, overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
