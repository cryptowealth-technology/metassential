/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "incrementFromForwarderOnly",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
    ],
    name: "setTrustedForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107d13803806107d1833981810160405281019061003291906100d0565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610142565b6000815190506100ca8161012b565b92915050565b6000602082840312156100e257600080fd5b60006100f0848285016100bb565b91505092915050565b60006101048261010b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610134816100f9565b811461013f57600080fd5b50565b610680806101516000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806305d85eda14610067578063572b6c051461009757806370699884146100c75780638da5cb5b146100d1578063d09de08a146100ef578063da742228146100f9575b600080fd5b610081600480360381019061007c91906103d6565b610115565b60405161008e91906104e8565b60405180910390f35b6100b160048036038101906100ac91906103d6565b61012d565b6040516100be919061048d565b60405180910390f35b6100cf610186565b005b6100d961022e565b6040516100e69190610472565b60405180910390f35b6100f7610254565b005b610113600480360381019061010e91906103d6565b6102b4565b005b60026020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b61018f3361012d565b6101ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c5906104c8565b60405180910390fd5b6001600260006101dc610387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102259190610514565b92505081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160026000610262610387565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ab9190610514565b92505081905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b906104a8565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006103923361012d565b156103a657601436033560601c90506103b5565b6103ae6103b9565b90506103b6565b5b90565b600033905090565b6000813590506103d081610633565b92915050565b6000602082840312156103e857600080fd5b60006103f6848285016103c1565b91505092915050565b6104088161056a565b82525050565b6104178161057c565b82525050565b600061042a600383610503565b9150610435826105e1565b602082019050919050565b600061044d600b83610503565b91506104588261060a565b602082019050919050565b61046c816105a8565b82525050565b600060208201905061048760008301846103ff565b92915050565b60006020820190506104a2600083018461040e565b92915050565b600060208201905081810360008301526104c18161041d565b9050919050565b600060208201905081810360008301526104e181610440565b9050919050565b60006020820190506104fd6000830184610463565b92915050565b600082825260208201905092915050565b600061051f826105a8565b915061052a836105a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561055f5761055e6105b2565b5b828201905092915050565b600061057582610588565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f3430330000000000000000000000000000000000000000000000000000000000600082015250565b7f436f756e7465723a343239000000000000000000000000000000000000000000600082015250565b61063c8161056a565b811461064757600080fd5b5056fea2646970667358221220a54bc65df27904a0dd48a5e5588a3ac9d7683af3c9625f8ed56e53fbe180b04b64736f6c63430008040033";

export class Counter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Counter> {
    return super.deploy(trustedForwarder, overrides || {}) as Promise<Counter>;
  }
  getDeployTransaction(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(trustedForwarder, overrides || {});
  }
  attach(address: string): Counter {
    return super.attach(address) as Counter;
  }
  connect(signer: Signer): Counter__factory {
    return super.connect(signer) as Counter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new utils.Interface(_abi) as CounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counter {
    return new Contract(address, _abi, signerOrProvider) as Counter;
  }
}
