/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SignedAllowanceInterface extends ethers.utils.Interface {
  functions: {
    "createMessage(address,uint256,address,uint256)": FunctionFragment;
    "ownershipSigner()": FunctionFragment;
    "usedAllowances(bytes32)": FunctionFragment;
    "validateOwnershipProof((address,address,address,uint256,uint256,uint256,uint256,bytes),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMessage",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedAllowances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOwnershipProof",
    values: [
      {
        from: string;
        to: string;
        nftContract: string;
        tokenId: BigNumberish;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOwnershipProof",
    data: BytesLike
  ): Result;

  events: {};
}

export class SignedAllowance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SignedAllowanceInterface;

  functions: {
    createMessage(
      account: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownershipSigner(overrides?: CallOverrides): Promise<[string]>;

    usedAllowances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateOwnershipProof(
      req: {
        from: string;
        to: string;
        nftContract: string;
        tokenId: BigNumberish;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  createMessage(
    account: string,
    nonce: BigNumberish,
    nftContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ownershipSigner(overrides?: CallOverrides): Promise<string>;

  usedAllowances(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  validateOwnershipProof(
    req: {
      from: string;
      to: string;
      nftContract: string;
      tokenId: BigNumberish;
      value: BigNumberish;
      gas: BigNumberish;
      nonce: BigNumberish;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createMessage(
      account: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ownershipSigner(overrides?: CallOverrides): Promise<string>;

    usedAllowances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateOwnershipProof(
      req: {
        from: string;
        to: string;
        nftContract: string;
        tokenId: BigNumberish;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createMessage(
      account: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipSigner(overrides?: CallOverrides): Promise<BigNumber>;

    usedAllowances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOwnershipProof(
      req: {
        from: string;
        to: string;
        nftContract: string;
        tokenId: BigNumberish;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createMessage(
      account: string,
      nonce: BigNumberish,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedAllowances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOwnershipProof(
      req: {
        from: string;
        to: string;
        nftContract: string;
        tokenId: BigNumberish;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
